#!/bin/bash
# -----------------------------------------------------------------------------
# Nombre: setup.sh
# Descripción:
#   Aprovisiona un sistema Debian/Ubuntu con:
#     - Swap extra (4GB)
#     - Repos externos (GitHub CLI, HashiCorp)
#     - Paquetes básicos (docker, zsh, tmux, etc.)
#     - Locales
#     - Rust + starship
#     - Compilación de Neovim (rama stable)
#     - Stow de dotfiles (xero/dotfiles) sin 1Password
# -----------------------------------------------------------------------------

# Variables de entorno
MYHOME="$HOME"       # Carpeta de usuario donde se clonarán dotfiles, etc.
ARCH="x86"           # Cambiar a "arm" si tu CPU es ARM (Raspberry Pi, etc.)
PKGARCH="$ARCH"

# Función de helper para imprimir encabezados
function _echo() {
  printf "\n=== %s ===\n\n" "$1"
}

# 1) Asegurar que somos root
if [ "$(id -u)" -ne 0 ]; then
  echo "ERROR: Debes ejecutar este script como root o con sudo."
  exit 1
fi

# 2) Crear Swap (4GB) - OPCIONAL
_echo "Creando un archivo swap de 4GB en /swapmeet"
dd if=/dev/zero of=/swapmeet bs=128M count=32
chmod 600 /swapmeet
mkswap /swapmeet
swapon /swapmeet
# Añadirlo a /etc/fstab para que persista en reinicios
echo "/swapmeet swap swap defaults 0 0" >> /etc/fstab
# Ajustar swappiness a 0 (para que use la RAM primero)
echo "vm.swappiness=0" >> /etc/sysctl.conf
sysctl vm.swappiness=0

# 3) Instalar dependencias básicas y configurar locales
_echo "Instalando paquetes básicos (git, gnupg, etc.) y configurando locales"
apt update
apt install -y git gpg bash curl gnupg software-properties-common locales

locale-gen "en_US.UTF-8"
localectl set-locale en_US.UTF-8
dpkg-reconfigure locales
dpkg-reconfigure console-setup
systemctl daemon-reload
systemctl restart console-setup.service

# 4) Añadir repositorios externos (GitHub CLI, HashiCorp)
_echo "Añadiendo repos de GitHub CLI y HashiCorp"

# GitHub CLI
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
  | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
  https://cli.github.com/packages stable main" \
  | tee /etc/apt/sources.list.d/github-cli.list > /dev/null

# HashiCorp
curl -sL https://apt.releases.hashicorp.com/gpg \
  | gpg --dearmor \
  | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
gpg --no-default-keyring \
  --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
  --fingerprint
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
  https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
  | tee /etc/apt/sources.list.d/hashicorp.list

# 5) Instalar el gran bloque de paquetes
_echo "Instalando paquetes principales (docker, zsh, tmux, gh, etc.)"
apt update
DEBIAN_FRONTEND=noninteractive apt install -y \
  docker.io \
  tmux \
  zsh \
  gh \
  stow \
  curl \
  build-essential \
  cmake \
  ninja-build \
  libevent-dev \
  libncurses5-dev \
  libssl-dev \
  libtool \
  libtool-bin \
  pkg-config \
  ripgrep \
  shellcheck \
  silversearcher-ag \
  python3 \
  python3-pip \
  python3-venv \
  tree \
  unzip \
  xz-utils \
  man-db \
  htop \
  net-tools \
  tzdata \
  whois \
  # Agrega aquí otros que necesites

systemctl stop docker.service
systemctl stop containerd.service
systemctl daemon-reload

# 6) Configurar la zona horaria (opcional)
_echo "Ajustando timezone a America/New_York (modifícalo si deseas otra zona)"
timedatectl set-timezone America/New_York

# 7) Instalar Rust y starship
_echo "Instalando Rust (rustup) y starship"
curl https://sh.rustup.rs -sSf \
  | CARGO_HOME="$MYHOME/.local/lib/cargo" \
    RUSTUP_HOME="$MYHOME/.local/lib/rustup" \
    sh -s -- -y --default-toolchain stable --profile default

# Instalar cargo-quickinstall para bajar binarios precompilados
CARGO_HOME="$MYHOME/.local/lib/cargo" \
RUSTUP_HOME="$MYHOME/.local/lib/rustup" \
$MYHOME/.local/lib/cargo/bin/cargo install cargo-quickinstall

# Instalar starship via cargo
CARGO_HOME="$MYHOME/.local/lib/cargo" \
RUSTUP_HOME="$MYHOME/.local/lib/rustup" \
$MYHOME/.local/lib/cargo/bin/cargo quickinstall starship

# 8) Compilar Neovim desde fuente
_echo "Clonando y compilando Neovim (rama stable)"
mkdir -p "$MYHOME/.local/src"
cd "$MYHOME/.local/src"
git clone --depth=1 https://github.com/neovim/neovim.git -b stable neovim
cd neovim
make CMAKE_BUILD_TYPE=RelWithDebInfo
make install

# 9) Clonar dotfiles y usar stow
_echo "Clonando dotfiles (xero) y usando stow para enlazar configuraciones"
cd "$MYHOME/.local/src"
git clone https://github.com/xero/dotfiles.git
cd dotfiles

# Si ya existen archivos en ~/.config/zsh o ~/.config/starship.toml, stow dará conflicto.
# puedes renombrarlos o borrarlos antes.
stow bin fun git gpg ssh tmux neovim zsh -t "$MYHOME"

# 10) Instalar plugins de tmux (ej. TPM)
_echo "Instalando plugins de tmux (TPM)"
mkdir -p "$MYHOME/.config/tmux/plugins"
git clone --depth=1 https://github.com/tmux-plugins/tpm \
  "$MYHOME/.config/tmux/plugins/tpm"
"$MYHOME/.config/tmux/plugins/tpm/scripts/install_plugins.sh"

# 11) Instalar Lazy.nvim y Mason (Neovim)
_echo "Instalando Lazy.nvim y plugins con Mason"
mkdir -p "$MYHOME/.local/share/nvim/lazy"
git clone --filter=blob:none --single-branch \
  https://github.com/folke/lazy.nvim.git \
  "$MYHOME/.local/share/nvim/lazy"

# Realiza la instalación de plugins en modo headless
nvim --headless "+Lazy! sync" +qa
nvim --headless "+MasonInstallAll" +qa

# 12) (Opcional) Cambiar el puerto SSH, etc.
# echo "Port 60806" >> /etc/ssh/sshd_config
# systemctl restart ssh

# 13) Personalizar motd
_echo "Personalizando el motd (mensaje de bienvenida)"
rm /etc/motd /etc/update-motd.d/* 2>/dev/null
cat << 'MOTD' > /etc/update-motd.d/00-banner
#!/bin/bash
echo "Bienvenido! (script xero-dots modificado). Disfruta tu nuevo entorno!"
MOTD
chmod +x /etc/update-motd.d/00-banner

# Fin
_echo "Setup completado. Puedes reiniciar manualmente con 'sudo reboot' si lo deseas."
