#!/bin/bash
# Editado para un setup básico sin usuario extra ni 1Password

# -- Variables globales básicas --
MYHOME="$HOME"                  # puedes cambiarlo si deseas apuntar a otro home
ARCH="x86"                      # "arm" o "x86" según tu arquitectura
PKGARCH="$ARCH"

# Función helper para imprimir títulos
function _echo() {
  printf "\n╓───── %s \n╙────────────────────────────────────── ─ ─ \n" "$1"
}

# Comprobar que se ejecuta como root
[ "$(id -u)" -ne 0 ] && {
  echo "Por favor, ejecuta este script como root (o con sudo)."
  exit 1
}

# --------------------------------------------------------------------
_echo "Creando swap (4GB)"
dd if=/dev/zero of=/swapmeet bs=128M count=32
chmod 600 /swapmeet
mkswap /swapmeet
swapon /swapmeet
swapon -s
echo "/swapmeet swap swap defaults 0 0" >> /etc/fstab
echo "vm.swappiness=0" >> /etc/sysctl.conf
sysctl vm.swappiness=0

# --------------------------------------------------------------------
_echo "Instalando dependencias básicas"
apt update
apt install -y git gpg bash curl locales gnupg software-properties-common

# --------------------------------------------------------------------
_echo "Configurando locales y consola"
locale-gen "en_US.UTF-8"
localectl set-locale en_US.UTF-8
dpkg-reconfigure locales
dpkg-reconfigure console-setup
systemctl daemon-reload
systemctl restart console-setup.service

# --------------------------------------------------------------------
_echo "Añadiendo apt sources (GitHub CLI, HashiCorp...)"
# GitHub CLI
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
  | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
  https://cli.github.com/packages stable main" \
  | tee /etc/apt/sources.list.d/github-cli.list > /dev/null

# Hashicorp
curl -sL https://apt.releases.hashicorp.com/gpg \
  | gpg --dearmor \
  | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
gpg --no-default-keyring \
  --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
  --fingerprint
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
  https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
  | tee /etc/apt/sources.list.d/hashicorp.list

# --------------------------------------------------------------------
_echo "Instalando gran parte de los paquetes del autor"
apt update
DEBIAN_FRONTEND=noninteractive apt install -y \
  apparmor \
  apt-utils \
  autoconf \
  automake \
  awscli \
  bash \
  bash-completion \
  bc \
  build-essential \
  ca-certificates \
  cmake \
  coreutils \
  curl \
  docker.io \
  doxygen \
  fzf \
  g++ \
  gcc \
  gettext \
  gh \
  git \
  golang \
  gpg \
  htop \
  jq \
  keychain \
  kubernetes-client \
  libevent-dev \
  libncurses5-dev \
  libprotobuf-dev \
  libssl-dev \
  libtool \
  libtool-bin \
  libutempter-dev \
  libx11-dev \
  libxfixes-dev \
  lua5.4 \
  luarocks \
  man-db \
  ncurses-term \
  net-tools \
  netbase \
  ninja-build \
  nmap \
  openssh-client \
  openssh-server \
  pkg-config \
  protobuf-compiler \
  python3 \
  python3-pip \
  python3-venv \
  ripgrep \
  shellcheck \
  silversearcher-ag \
  socat \
  stow \
  sudo \
  tar \
  tmux \
  tree \
  tzdata \
  unzip \
  vim-tiny \
  whois \
  xsel \
  xz-utils \
  zlib1g-dev \
  zsh \
  zsh-syntax-highlighting

# --------------------------------------------------------------------
_echo "Algunas configuraciones systemd"
systemctl stop docker.service
systemctl stop containerd.service

# --------------------------------------------------------------------
_echo "Configurando timezone (ej. America/New_York)"
timedatectl set-timezone America/New_York

# --------------------------------------------------------------------
# (Opcional) Cambiar hostname (comentar si no lo necesitas)
# HOSTNAME="thirteen"
# hostname "$HOSTNAME"
# hostnamectl set-hostname "$HOSTNAME"
# sed -i '/^127\.0\.0\.1\s/s/$/ '"$HOSTNAME"'/' /etc/hosts

# --------------------------------------------------------------------
_echo "Instalando Rust con rustup"
curl https://sh.rustup.rs -sSf \
  | CARGO_HOME="$MYHOME/.local/lib/cargo" \
    RUSTUP_HOME="$MYHOME/.local/lib/rustup" \
    sh -s -- -y --default-toolchain stable --profile default

# Instalar cargo-quickinstall + utilidades
CARGO_HOME="$MYHOME/.local/lib/cargo" \
RUSTUP_HOME="$MYHOME/.local/lib/rustup" \
$MYHOME/.local/lib/cargo/bin/cargo install cargo-quickinstall

CARGO_HOME="$MYHOME/.local/lib/cargo" \
RUSTUP_HOME="$MYHOME/.local/lib/rustup" \
$MYHOME/.local/lib/cargo/bin/cargo quickinstall lolcat stylua

# --------------------------------------------------------------------
_echo "Instalando starship (prompt)"
if [[ "$ARCH" == "arm" ]]; then
  curl -sS https://starship.rs/install.sh | sh
else
  CARGO_HOME="$MYHOME/.local/lib/cargo" \
  RUSTUP_HOME="$MYHOME/.local/lib/rustup" \
  $MYHOME/.local/lib/cargo/bin/cargo quickinstall starship
fi

# --------------------------------------------------------------------
_echo "Compilando Neovim desde fuente (rama stable)"
git clone --depth=1 https://github.com/neovim/neovim.git -b stable "$MYHOME/.local/src/neovim"
cd "$MYHOME/.local/src/neovim"
CMAKE_BUILD_TYPE=RelWithDebInfo make
make install

# --------------------------------------------------------------------
_echo "Clonando dotfiles y stow (ajusta según tu fork o repo)"
cd "$MYHOME/.local/src"
git clone https://github.com/xero/dotfiles.git dotfiles
cd dotfiles

# stow varios directorios al $MYHOME (ajusta según tus carpetas)
stow bin fun git gpg ssh tmux neovim zsh -t "$MYHOME"

# --------------------------------------------------------------------
_echo "Instalando plugins de tmux"
mkdir -p "$MYHOME/.config/tmux/plugins"
git clone --depth=1 https://github.com/tmux-plugins/tpm "$MYHOME/.config/tmux/plugins/tpm"
"$MYHOME/.config/tmux/plugins/tpm/scripts/install_plugins.sh" 
# (Opcional) ejemplo con "tmux-thumbs"
if [[ -d "$MYHOME/.config/tmux/plugins/tmux-thumbs" ]]; then
  cd "$MYHOME/.config/tmux/plugins/tmux-thumbs"
  expect -c "spawn ./tmux-thumbs-install.sh; send \"\r1\r\"; expect complete" 1> /dev/null
fi

# --------------------------------------------------------------------
_echo "Instalando Lazy.nvim y Mason"
mkdir -p "$MYHOME/.local/share/nvim/lazy"
git clone --filter=blob:none --single-branch https://github.com/folke/lazy.nvim.git "$MYHOME/.local/share/nvim/lazy"
nvim --headless "+Lazy! sync" +qa
nvim --headless "+MasonInstallAll" +qa

# --------------------------------------------------------------------
_echo "Ejemplo de MOTD personalizado (puedes quitarlo si no quieres cambiarlo)"
rm /etc/motd /etc/update-motd.d/* 2>/dev/null
cat << 'MOTD' > /etc/update-motd.d/00-banner
#!/bin/bash
echo "Bienvenido a tu servidor (script xero mod). Disfruta la terminal!"
MOTD
chmod +x /etc/update-motd.d/00-banner

# --------------------------------------------------------------------
_echo "Limpiar e información final"
# (Quita o comenta si no quieres manipular ssh)
# echo "Port 60806" >> /etc/ssh/sshd_config
# systemctl restart ssh

echo "Setup completo. Revisa todo antes de usarlo en producción."
echo "Si deseas reiniciar, hazlo manualmente:  sudo reboot"
